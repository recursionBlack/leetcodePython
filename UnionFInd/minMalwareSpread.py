from typing import List
from collections import defaultdict

# 23. 尽量减少恶意软件的传播
class UnionFind:
    __slots__ = "father", "size"

    def __init__(self, n):
        self.father = list(range(n))
        self.size = [1] * n

    def find(self, i: int) -> int:
        if i != self.father[i]:
            self.father[i] = self.find(self.father[i])
        return self.father[i]

    def union(self, a: int, b: int):
        fa = self.find(a)
        fb = self.find(b)
        if fa != fb:
            self.father[fb] = fa
            self.size[fa] += self.size[fb]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        for i in range(n):
            for j in range(i+1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)

        g = defaultdict(list)
        for i in initial:
            fi = uf.find(i)
            g[fi].append(i)

        # 若某个集合里只有一个节点被感染，那么，移除感染的节点，就能阻止整个集合被感染
        # 获取其中最大的集合，里的那个节点。
        MaxSize = 0
        resNode = -1
        for key, value in g.items():
            if len(value) == 1:
                if uf.size[key] >= MaxSize:
                    if uf.size[key] > MaxSize:
                        MaxSize = uf.size[key]
                        resNode = value[0]
                    else:
                        resNode = min(resNode, value[0])

        if resNode != -1:
            return resNode

        # 如果每个集合里，都至少有两个节点被感染，
        # 则无论移除哪一个，都无法阻止该集合被全部感染，选择其中较小的节点进行移除
        # 可能每个集合里，都至少有两个节点被感染
        MinNode = 301
        for key, value in g.items():
            if len(value) > 1:
                for i in value:
                    MinNode = min(MinNode, i)

        return MinNode


"""
这个问题，看懂题目都让我迷惑半天，后来才明白，原来graph[i][j]的意思，是第i个节点与第j号节点的联通状态
横纵坐标代表的是节点的序号，而不是节点的坐标！！！！

剩下的，就比较简单了，情况比较多，首先，集合里，如果只有1个节点被感染，那么移除该节点，整个集合就不会被感染了。
返回集合最大的那个节点

其次，集合里，如果有两个节点被感染了，那么无论移除哪一个，都无法阻止该集合被全部感染，那么返回两个节点中，较小的那个
"""

if __name__ == "__main__":
    # 创建Solution实例
    solution = Solution()

    # # 测试用例1：基础案例
    graph = [[1,1,0],[1,1,0],[0,0,1]]
    initial = [0,1]
    print("测试用例1输入 = {}, = {}:".format(graph, initial))
    print("测试用例1输出:", solution.minMalwareSpread(graph, initial))
    # 预期输出:0

    # # 测试用例1：基础案例
    graph = [[1,0,0],[0,1,0],[0,0,1]]
    initial = [0, 2]
    print("测试用例1输入 = {}, = {}:".format(graph, initial))
    print("测试用例1输出:", solution.minMalwareSpread(graph, initial))
    # 预期输出:0

    # # 测试用例1：基础案例
    graph = [[1,1,1],[1,1,1],[1,1,1]]
    initial = [1, 2]
    print("测试用例1输入 = {}, = {}:".format(graph, initial))
    print("测试用例1输出:", solution.minMalwareSpread(graph, initial))
    # 预期输出:1

    # # 测试用例1：基础案例
    graph = [[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,1,0],[0,0,0,1,1,0],[0,0,0,0,0,1]]
    initial = [5,0]
    print("测试用例1输入 = {}, = {}:".format(graph, initial))
    print("测试用例1输出:", solution.minMalwareSpread(graph, initial))
    # 预期输出:0